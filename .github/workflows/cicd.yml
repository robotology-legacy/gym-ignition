name: CI/CD

on:
  push:
  pull_request:
  release:
    types:
      - published

jobs:

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    container: 'ubuntu:focal'
    strategy:
      fail-fast: false
      matrix:
        type:
          - User
          - Developer
        ignition:
          # - citadel
          # - dome
          - edifice

    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    steps:

      - name: Inspect Environment
        run: |
          env | grep ^GITHUB
          echo ""
          cat ${GITHUB_EVENT_PATH}
          echo ""
          env

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            wget \
            git \
            gpg-agent \
            ninja-build \
            build-essential \
            software-properties-common \
            python3 \
            python3-pip \
            python3-wheel
          pip3 install pytest pytest-xvfb setuptools_scm
        env:
          DEBIAN_FRONTEND: noninteractive

      - uses: actions/checkout@master
      - run: git fetch --prune --unshallow

      - name: Compilation cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-ccache-${{ matrix.ignition }}-${{ matrix.type }}-${{ github.sha }}
          # Restore any ccache cache entry, if none for the key above exists
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.ignition }}-${{ matrix.type }}
            ${{ runner.os }}-ccache-${{ matrix.ignition }}
            ${{ runner.os }}-ccache

      - name: Enable ccache
        run: |
          apt-get update
          apt-get install -y ccache
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          ccache --set-config=max_size=5.0G
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          ccache -p
          ccache -s

      # ================
      # Install Ignition
      # ================

      - name: '[Stable Channel] Install Ignition ${{ matrix.ignition }}'
        if: |
          github.event_name == 'release' ||
          github.ref == 'refs/heads/master' ||
          (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'master')
        run: |
          sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" >\
            /etc/apt/sources.list.d/gazebo-stable.list'
          wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -
          apt-get update
          apt-get install -y --no-install-recommends ignition-${{ matrix.ignition }}

      - name: '[Nightly Channel] Install Ignition ${{ matrix.ignition }}'
        if: |
          (github.event_name == 'push' && github.ref != 'refs/heads/master') ||
          (github.event_name == 'pull_request' && github.event.pull_request.base.ref != 'master')
        run: |
          sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" >\
            /etc/apt/sources.list.d/gazebo-stable.list'
          wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -
          apt-get update
          pip3 install vcstool colcon-common-extensions
          mkdir -p /workspace/src
          cd /workspace/src
          wget -O - ${TAGS_YAML} | vcs import
          SYSTEM_VERSION=$(lsb_release -cs)
          #apt-get -y install $(sort -u $(find . -iname 'packages-'$SYSTEM_VERSION'.apt' -o -iname 'packages.apt') | tr '\n' ' ')
          apt-get -y install $(sort -u $(find . -iname 'packages-'$(lsb_release -cs)'.apt' -o -iname 'packages.apt') | grep -v -E "^libignition|^libsdformat")
          cd /workspace
          colcon graph
          colcon build \
              --cmake-args \
                  -GNinja \
                  -DBUILD_TESTING:BOOL=OFF \
                  -DCMAKE_BUILD_TYPE=Debug \
              --merge-install
          echo "source /workspace/install/setup.bash" >> /etc/bash.bashrc
        env:
          TAGS_YAML: https://raw.githubusercontent.com/ignition-tooling/gazebodistro/master/collection-${{ matrix.ignition }}.yaml

      # ==========================
      # Install other dependencies
      # ==========================

      - name: Install iDynTree dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            libxml2-dev coinor-libipopt-dev libeigen3-dev libassimp-dev swig

      # =============
      # Build project
      # =============

      # Note: In order to execute the setup.sh script, the file /etc/bash.bashrc must be sourced.
      #       To do that, we change the shell to a bash interactive session.

      # Developer installation
      - name: Install iDynTree
        if: matrix.type == 'Developer'
        run: |
          pip3 install git+https://github.com/robotology/idyntree@devel
          IDYNTREE_PYTHON_PKG=$(python3 -c 'import idyntree, pathlib; print(pathlib.Path(idyntree.__file__).parent)')
          echo "CMAKE_PREFIX_PATH=$IDYNTREE_PYTHON_PKG" >> $GITHUB_ENV
      - name: '[Developer] Build and Install C++'
        if: matrix.type == 'Developer'
        shell: bash -i -e {0}
        run: |
          env
          mkdir build && cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DIGNITION_DISTRIBUTION=$(python3 -c "print('${{ matrix.ignition }}'.capitalize())")
          cmake --build . --target install
      - name: '[Developer] Setup Python Package'
        if: matrix.type == 'Developer'
        run: pip3 install -e .

      # User installation
      - name: '[User] Create wheel'
        if: matrix.type == 'User' && matrix.ignition == 'edifice'
        shell: bash -i -e {0}
        run: pip3 wheel -v -w dist/ .
      # Note: calling "pip wheel" with "--global-option" forces dependencies to be build from their sdist.
      #       Since it's very slow, we create the wheel from setup.py without isolation.
      - name: '[User] Create wheel'
        if: matrix.type == 'User' && matrix.ignition != 'edifice'
        shell: bash -i -e {0}
        run: |
          pip3 install \
            cmake_build_extension \
            git+https://github.com/robotology/idyntree@devel
          python3 setup.py bdist_wheel \
            build_ext -DIGNITION_DISTRIBUTION=$(python3 -c "print('${{ matrix.ignition }}'.capitalize())")
      - name: '[User] Install local wheel'
        if: matrix.type == 'User'
        run: |
          cd dist
          pip3 install -v *.whl

      - name: Inspect installed ScenarIO package
        run: |
          apt-get install -y --no-install-recommends tree
          tree $(python3 -c "import scenario, pathlib; print(pathlib.Path(scenario.__file__).parent)")

      - name: Ccache stats
        run: ccache --show-stats

      # ============
      # Test project
      # ============

      - name: '[ScenarI/O] Python Tests'
        shell: bash -i -e {0}
        run: |
          cd tests
          pytest -m "scenario"

      - name: '[ScenarI/O] Python Tests with Valgrind'
        shell: bash -i -e {0}
        if: failure()
        run: |
          apt-get install -y --no-install-recommends valgrind
          pip3 install colour-valgrind
          cd tests
          valgrind --log-file=/tmp/valgrind.log pytest -s -m "scenario" || colour-valgrind -t /tmp/valgrind.log

      - name: '[gym_ignition] Python Tests'
        shell: bash -i -e {0}
        run: |
          cd tests
          pytest -m "gym_ignition"

      - name: '[gym_ignition] Python Tests with Valgrind'
        shell: bash -i -e {0}
        if: failure()
        run: |
          pip3 install colour-valgrind
          cd tests
          valgrind --log-file=/tmp/valgrind.log pytest -s -m "gym_ignition" || colour-valgrind -t /tmp/valgrind.log

      # ======
      # Deploy
      # ======

      - name: Remove other wheels
        if: matrix.type == 'User'
        run: find dist/ -type f -not -name 'gym_ignition-*' -delete

      - name: Rename wheel
        if: matrix.type == 'User'
        run: |
          ls dist/
          find dist/ -type f -name "*.whl" -exec rename.ul linux manylinux1 {} +
          ls dist/

      # When this workflow will test other OSs, the sdist has to be created and pushed only once
      - name: Create sdist
        if: matrix.type == 'User'
        # if: matrix.type == 'User' && startsWith(matrix.os, 'ubuntu')
        run: |
          pip3 install cmake_build_extension setuptools_scm
          python3 setup.py sdist

      - uses: actions/upload-artifact@v2
        if: matrix.type == 'User'
        with:
          name: packages
          path: dist/*

      # Validate the last tag accordingly to PEP440
      # From https://stackoverflow.com/a/37972030/12150968
      - name: Check PEP440 compliance
        if: github.event_name == 'release'
        run: |
          apt-get update
          apt-get install -y source-highlight
          last_tag_with_v="$(git describe --abbrev=0 --tags)"
          last_tag=${last_tag_with_v#v}
          rel_regexp='^(\d+!)?(\d+)(\.\d+)+([\.\-\_])?((a(lpha)?|b(eta)?|c|r(c|ev)?|pre(view)?)\d*)?(\.?(post|dev)\d*)?$'
          echo ""
          echo $last_tag
          echo ""
          check-regexp ${rel_regexp} ${last_tag}
          match=$(check-regexp ${rel_regexp} ${last_tag} | grep matches | cut -d ' ' -f 5)
          test $match -eq 1 && true

      # The package is deployed only if there's an upstream release / prerelease, or it is upstream's devel.
      - name: Publish package to PyPI
        if: |
          github.repository == 'robotology/gym-ignition' && matrix.type == 'User' &&
          ((github.event_name == 'release' && github.event.action == 'published' && matrix.ignition == 'edifice') ||
           (github.event_name == 'push' && matrix.ignition == 'edifice' && github.ref == 'refs/heads/devel'))
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
